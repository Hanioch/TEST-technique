/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Universit√© Demo API
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  Cours,
  Inscription,
  Note
} from '.././model';





/**
 * @summary Liste des inscriptions
 */
export const getApiInscriptions = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Inscription[]>> => {
    
    
    return axios.get(
      `/api/inscriptions`,options
    );
  }


export const getGetApiInscriptionsQueryKey = () => {
    return [`/api/inscriptions`] as const;
    }

    
export const getGetApiInscriptionsQueryOptions = <TData = Awaited<ReturnType<typeof getApiInscriptions>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiInscriptions>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiInscriptionsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiInscriptions>>> = ({ signal }) => getApiInscriptions({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiInscriptions>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiInscriptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiInscriptions>>>
export type GetApiInscriptionsQueryError = AxiosError<unknown>


/**
 * @summary Liste des inscriptions
 */

export function useGetApiInscriptions<TData = Awaited<ReturnType<typeof getApiInscriptions>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiInscriptions>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiInscriptionsQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Liste des cours
 */
export const getApiCours = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Cours[]>> => {
    
    
    return axios.get(
      `/api/cours`,options
    );
  }


export const getGetApiCoursQueryKey = () => {
    return [`/api/cours`] as const;
    }

    
export const getGetApiCoursQueryOptions = <TData = Awaited<ReturnType<typeof getApiCours>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiCours>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiCoursQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCours>>> = ({ signal }) => getApiCours({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiCours>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiCoursQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCours>>>
export type GetApiCoursQueryError = AxiosError<unknown>


/**
 * @summary Liste des cours
 */

export function useGetApiCours<TData = Awaited<ReturnType<typeof getApiCours>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiCours>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiCoursQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Liste des notes
 */
export const getApiNotes = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Note[]>> => {
    
    
    return axios.get(
      `/api/notes`,options
    );
  }


export const getGetApiNotesQueryKey = () => {
    return [`/api/notes`] as const;
    }

    
export const getGetApiNotesQueryOptions = <TData = Awaited<ReturnType<typeof getApiNotes>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiNotes>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiNotesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiNotes>>> = ({ signal }) => getApiNotes({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiNotes>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiNotesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiNotes>>>
export type GetApiNotesQueryError = AxiosError<unknown>


/**
 * @summary Liste des notes
 */

export function useGetApiNotes<TData = Awaited<ReturnType<typeof getApiNotes>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiNotes>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiNotesQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



